version: 0.2

env:
  variables:
    AWS_REGION: us-east-1
    IMAGE_REPO: 418295691381.dkr.ecr.us-east-1.amazonaws.com/cinema
    CLUSTER_NAMESPACE: default

phases:
  install:
    commands:
      - echo "Installing SonarQube Scanner"
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
      - ls -l sonar-scanner-5.0.1.3006-linux/bin

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_REPO
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - echo "Using image tag $IMAGE_TAG"
      - export IMAGE_TAG

  build:
    commands:
      - echo "Packaging cinema.war"
      - export SERVLET_JAR=WebContent/WEB-INF/lib/tomcat-servlet-api-9.0.89.jar
      - export LIB_JARS="$SERVLET_JAR:WebContent/WEB-INF/lib/postgresql-42.2.2.jar"
      - rm -rf build
      - mkdir -p build/ROOT/WEB-INF/classes build/ROOT/WEB-INF/lib
      - find src -name '*.java' | xargs javac -cp "$LIB_JARS" -d build/ROOT/WEB-INF/classes
      - cp -r WebContent/* build/ROOT/
      - cp WebContent/WEB-INF/lib/*.jar build/ROOT/WEB-INF/lib/
      - cd build/ROOT && "$JAVA_HOME/bin/jar" cf ../../cinema.war . && cd ../..
      - echo "Building Docker image"
      - docker build --build-arg WAR_FILE=cinema.war -t $IMAGE_REPO:$IMAGE_TAG .
      - docker push $IMAGE_REPO:$IMAGE_TAG
      - echo "Updating deployment manifest"
      - sed -i "s|PLACEHOLDER_TAG|$IMAGE_TAG|g" deployment/deployment.yaml
      - cat deployment/deployment.yaml | grep image
      # SonarQube scan (absolute path)
      - echo "Running SonarQube scan"
      - $(pwd)/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
          -Dsonar.projectKey=capstone_project \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://54.160.133.126 \
          -Dsonar.login=sqp_1510ac172333c95476e88865e1c0c549ecead749

  post_build:
    commands:
      - echo "Build complete â€“ handing artifacts to CodeDeploy"

artifacts:
  files:
    - appspec.yml
    - deployment/**/*
